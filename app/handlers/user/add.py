# app/handlers/user/add.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.services.parser import fetch_price
from app.db import crud
from app.models.user import User
from urllib.parse import urlparse
from app.keyboards.inline import interval_inline_kb
from app.services.scheduler import schedule_price_check

router = Router()


class AddItemState(StatesGroup):
    waiting_for_url = State()
    waiting_for_type = State()
    waiting_for_threshold = State()
    waiting_for_interval = State()

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")
    await state.set_state(AddItemState.waiting_for_url)


@router.message(AddItemState.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    url = message.text.strip()

    # --- ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL ---
    parsed = urlparse(url)
    if not (parsed.scheme in ("http", "https") and parsed.netloc):
        return await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    await state.update_data(url=url)
    await message.answer("üìâ –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä?\n\n"
                         "–ù–∞–ø–∏—à–∏ `—Ü–µ–Ω–∞` ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É\n"
                         "–ò–ª–∏ `–ø—Ä–æ—Ü–µ–Ω—Ç` ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ %")
    await state.set_state(AddItemState.waiting_for_type)


@router.message(AddItemState.waiting_for_type)
async def process_type(message: Message, state: FSMContext):
    choice = message.text.lower().strip()
    if choice not in ("—Ü–µ–Ω–∞", "–ø—Ä–æ—Ü–µ–Ω—Ç"):
        return await message.answer("‚ùå –í–≤–µ–¥–∏ –ª–∏–±–æ `—Ü–µ–Ω–∞`, –ª–∏–±–æ `–ø—Ä–æ—Ü–µ–Ω—Ç`.")

    await state.update_data(mode=choice)
    text = "–£–∫–∞–∂–∏ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):" if choice == "—Ü–µ–Ω–∞" else "–£–∫–∞–∂–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15)"
    await message.answer(text)
    await state.set_state(AddItemState.waiting_for_threshold)


@router.message(AddItemState.waiting_for_threshold)
async def process_threshold(message: Message, state: FSMContext):
    user_data = await state.get_data()
    url = user_data["url"]
    mode = user_data["mode"]

    try:
        if mode == "—Ü–µ–Ω–∞":
            threshold = float(message.text.strip())
        else:
            threshold = float(message.text.strip())
            if threshold <= 0 or threshold > 100:
                raise ValueError
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞...")

    # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–∞
    current_price, title, _ = await fetch_price(url)

    if current_price is None:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    await state.update_data(
        current_price=current_price,
        title=title,
        threshold=threshold
    )
    await message.answer(
        "‚úÖ –¢–æ–≤–∞—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—É:",
        reply_markup=interval_inline_kb()
    )
    await state.set_state(AddItemState.waiting_for_interval)

@router.callback_query(AddItemState.waiting_for_interval, F.data.startswith("interval:"))
async def process_interval(call: CallbackQuery, state: FSMContext):
    interval = int(call.data.split(":")[1])

    user_data = await state.get_data()
    url = user_data["url"]
    mode = user_data["mode"]
    threshold = user_data["threshold"]
    current_price = user_data["current_price"]
    title = user_data["title"]

    user = await crud.get_user_by_telegram_id(call.from_user.id)
    if not user:
        user = await crud.create_user(call.from_user.id, call.from_user.username)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
    item = await crud.add_watched_item(
        user_id=user.id,
        url=url,
        title=title,
        threshold_price=threshold if mode == "—Ü–µ–Ω–∞" else None,
        percent_change=threshold if mode == "–ø—Ä–æ—Ü–µ–Ω—Ç" else None,
        current_price=current_price,
        check_interval=interval
    )

    # üöÄ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ scheduler
    schedule_price_check(item.id, interval)
    print(f"[Scheduler] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–µ–∂–µ–Ω–∏–µ item_id={item.id}, –∏–Ω—Ç–µ—Ä–≤–∞–ª={interval} –º–∏–Ω.")

    await call.message.edit_text(  # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–æ–≤–∞—Ä–æ–º:\n\n<b>{title or url}</b>\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} –º–∏–Ω."
    )

    await state.clear()

